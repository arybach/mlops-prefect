import sklearn
import argparse
import os
import pickle
import pandas as pd
import numpy as np


def fetch_ios(year: int, month: int, taxi_type: str):
    input_url = f'https://d37ci6vzurychx.cloudfront.net/trip-data/{taxi_type}_tripdata_{year:04d}-{month:02d}.parquet'
    output_file = f'./jupyter/tripdata/{taxi_type}/{year:04d}-{month:02d}.parquet'
    return input_url, output_file


def read_data(filename: str):
    categorical = ['PULocationID', 'DOLocationID']
    df = pd.read_parquet(filename)
    print(df.head())

    df['duration'] = df.lpep_dropoff_datetime - df.lpep_pickup_datetime
    df.duration = df.duration.dt.total_seconds() / 60
    df = df[(df.duration >= 1) & (df.duration <= 60)].copy()
    
    df['ride_id'] = df['lpep_pickup_datetime'].dt.strftime('%Y/%m_') + df.index.astype('str')
    df[categorical] = df[categorical].fillna(-1).astype('int').astype('str')

    return df


def load_model():
    # model generated by the hmwk1 code
    with open('model.bin', 'rb') as f_in:
        dv, model = pickle.load(f_in)
    return dv, model


def apply_model(input_url):

    categorical = ['PULocationID', 'DOLocationID']
    df = read_data(input_url)
    # df to dicts
    dicts = df[categorical].to_dict(orient='records')
    dv, model = load_model()

    X_val = dv.transform(dicts)
    y_pred = model.predict(X_val)
    return model.predict(X_val), df


def save_predictions_to_file(df, output_file):
# this has been done on read 
#df['ride_id'] = df['tpep_pickup_datetime'].dt.strftime('%Y/%m_') + df.index.astype('str')

    directory = os.path.dirname(output_file)
    if not os.path.exists(directory):
        os.makedirs(directory)
    
    df_result = df[['ride_id','prediction']]
    df_result.to_parquet(
        output_file,
        engine='pyarrow',
        compression=None,
        index=False
    )


def run_stutter(year: int, month: int, taxi_type: str):

    input_url, output_file = fetch_ios(year, month, taxi_type)
    
    predictions, df = apply_model(input_url)
    
    std_dev = np.std(predictions)
    mean = np.mean(predictions)
    print("Prediction Standard Deviation:", std_dev)
    print("Prediction Mean:", mean)
    
    df['prediction'] = predictions

    save_predictions_to_file(df, output_file)


if __name__ == "__main__":
    # python3 jupyter/stutter.py --year 2022 --month 2 --taxi_type green

    parser = argparse.ArgumentParser(description="Stutter")
    parser.add_argument("--year", type=int, default=2022, help="Year of the data")
    parser.add_argument("--month", type=int, default=2, help="Month of the data")
    parser.add_argument("--taxi_type", type=str, default="green", help="Taxi type")
    args = parser.parse_args()
    run_stutter(args.year, args.month, args.taxi_type)